{"version":3,"sources":["components/headerComponent.js","components/weatherCardComponent.js","components/weatherComponent.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","Component","WeatherCard","props","onSubmit","loadWeather","type","name","placeholder","Weather","fahrenheit","this","temperature","Math","floor","country","city","humidity","description","error","App","state","undefined","getWeather","_callee","e","api_call","response","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","console","log","stop","headerComponent","weatherCardComponent","weatherComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAceA,0LAVT,OACEC,EAAAC,EAAAC,cAAA,WAEQF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,uBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BAAb,qDANKC,IAAMC,YCUZC,EAVK,SAACC,GACnB,OACIP,EAAAC,EAAAC,cAAA,QAAMM,SAAUD,EAAME,aACpBT,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3CZ,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9CZ,EAAAC,EAAAC,cAAA,+BCyCOW,mLA1CP,IAEIC,EAAoB,KAFTC,KAAKR,MAAMS,YACD,KACU,GAInC,OAFAF,EAAaG,KAAKC,MAAMJ,GAIpBd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAEPY,KAAKR,MAAMY,SAAWJ,KAAKR,MAAMa,MAAQpB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,YACrCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,KAAoCY,KAAKR,MAAMa,KAA/C,KAAuDL,KAAKR,MAAMY,UAKtEJ,KAAKR,MAAMS,aAAehB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,eACtBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,KAAoCW,IAKxCC,KAAKR,MAAMc,UAAYrB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,YACnBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,KAAoCY,KAAKR,MAAMc,WAKnDN,KAAKR,MAAMe,aAAetB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,cACtBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,KAAoCY,KAAKR,MAAMe,cAKnDP,KAAKR,MAAMgB,OAASvB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBY,KAAKR,MAAMgB,eAtC5DlB,aC0EPmB,6MAnEbC,MAAQ,CACNT,iBAAaU,EACbN,UAAMM,EACNL,cAAUK,EACVJ,iBAAaI,EACbH,WAAOG,KAGTC,iDAAa,SAAAC,EAAOC,GAAP,IAAAT,EAAAD,EAAAW,EAAAC,EAAA,OAAAC,EAAA/B,EAAAgC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAELhB,EAAOS,EAAEQ,OAAOC,SAASlB,KAAKmB,MAC9BpB,EAAUU,EAAEQ,OAAOC,SAASnB,QAAQoB,MAE1CV,EAAEW,iBALSN,EAAAE,KAAA,EAOYK,MAAK,oDAAAC,OAAqDtB,EAArD,KAAAsB,OAA6DvB,EAA7D,UAA8E,qCAP/F,cAOLW,EAPKI,EAAAS,KAAAT,EAAAE,KAAA,EASYN,EAASc,OATrB,OASLb,EATKG,EAAAS,KAWVvB,GAAQD,EACT0B,EAAKC,SAAS,CACZ9B,YAAae,EAASgB,KAAKC,KAC3B5B,KAAMW,EAASpB,KACfQ,QAASY,EAASkB,IAAI9B,QACtBE,SAAUU,EAASgB,KAAK1B,SACxBC,YAAaS,EAASmB,QAAQ,GAAG5B,YACjCC,MAAO,KAGTsB,EAAKC,SAAS,CACZvB,MAAO,+BAIT4B,QAAQC,IAAIrB,GA1BD,yBAAAG,EAAAmB,SAAAzB,oIA8BX,OACE5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAACoD,EAAD,OAEFtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAACqD,EAAD,CAAa9C,YAAaM,KAAKY,aAC/B3B,EAAAC,EAAAC,cAACsD,EAAD,CACExC,YAAaD,KAAKU,MAAMT,YACxBI,KAAML,KAAKU,MAAML,KACjBD,QAASJ,KAAKU,MAAMN,QACpBE,SAAUN,KAAKU,MAAMJ,SACrBC,YAAaP,KAAKU,MAAMH,YACxBC,MAAOR,KAAKU,MAAMF,qBAxDlBlB,aCIEoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.64e1aa7a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n      return (\r\n        <div>\r\n\r\n                <h1 className=\"title-container__title\">My 1st Weather App </h1>\r\n                <p className=\"title-container__subtitle\"> Find the current weather in your city.  </p>\r\n            </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst WeatherCard = (props) => {\r\n  return (\r\n      <form onSubmit={props.loadWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n        <button>Get Weather</button>\r\n      </form>\r\n  )\r\n}\r\n\r\nexport default WeatherCard;","import React, {Component} from 'react';\r\n\r\nclass Weather extends Component{\r\n    \r\n    \r\n    render(){\r\n        const kelvin = this.props.temperature;\r\n        const celsius = kelvin - 273;\r\n        let fahrenheit = celsius * (9/5) + 32;\r\n\r\n        fahrenheit = Math.floor(fahrenheit);\r\n        \r\n        return(\r\n\r\n            <div className=\"weather-info\">\r\n                {\r\n                    this.props.country && this.props.city && <p className=\"weather__key\">Location: \r\n                        <span className=\"weather__value\">  {this.props.city}, {this.props.country}</span>                    \r\n                    </p> \r\n                }\r\n                \r\n                {\r\n                    this.props.temperature && <p className=\"weather__key\">Temperature: \r\n                        <span className=\"weather__value\">  {fahrenheit}</span>\r\n                    </p>\r\n                }\r\n\r\n                {\r\n                    this.props.humidity && <p className=\"weather__key\">Humidity: \r\n                        <span className=\"weather__value\">  {this.props.humidity}</span>\r\n                    </p>\r\n                }\r\n\r\n                {\r\n                    this.props.description && <p className=\"weather__key\">Conditions:  \r\n                        <span className=\"weather__value\">  {this.props.description}</span>\r\n                    </p>\r\n                }\r\n\r\n                {\r\n                    this.props.error && <p className=\"weather__error\">{this.props.error}</p>\r\n                }\r\n        \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/headerComponent';\nimport WeatherCard from './components/weatherCardComponent';\nimport Weather from './components/weatherComponent';\n\n\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    \n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    e.preventDefault();\n  \n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${'8b601678a038152bbb08d49fb2949ad4'}`);\n  \n    const response = await api_call.json();\n    \n  if(city && country){\n    this.setState({\n      temperature: response.main.temp,\n      city: response.name,\n      country: response.sys.country,\n      humidity: response.main.humidity,\n      description: response.weather[0].description,\n      error: \"\"\n    })\n  } else {\n    this.setState({\n      error: \"Please enter the values...\"\n    })\n  }\n\n    console.log(response);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-5 title-container\">\n                <Header />\n              </div>\n              <div className=\"col-xs-5 form-container\">\n                <WeatherCard loadWeather={this.getWeather} />\n                <Weather\n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n            </div>\n          </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}